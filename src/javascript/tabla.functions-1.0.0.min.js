const stopWords = new Set([
  "as",
  "a",
  "is",
  "of",
  "to",
  "you",
  "all",
  "am",
  "about",
  "the",
  "by"
]);
var recognizing;
var recognition = new webkitSpeechRecognition();
var message = document.getElementById("useful-message");
reset();
recognition.onend = reset();
let command = "";

//Function which grabs speech from user and waits until finished to display command
recognition.onresult = function(event) {
  for (var i = event.resultIndex; i < event.results.length; ++i) {
    if (event.results[i].isFinal) {
      command = event.results[i][0].transcript;
      textarea.value = getFormattedTextOfVoice(command);
    }
  }
};

/**
 * Formats the text of the command by uppercasing first character
 * @param  {String} command The command of the user
 */
function getFormattedTextOfVoice(command) {
  return command.charAt(0).toUpperCase() + command.slice(1);
}

/**
 * Validates that the command is not an empty string
 */
function confirm() {
  if (validateNotEmpty(textarea.value)) filterCommand(textarea.value);
}

/**
 * Add two numbers together
 * @param  {String} command of the user
 * @return {Boolean} True if the command is not empty, false if it is
 */
function validateNotEmpty(command) {
  if (command.trim() === "") {
    var message = document.getElementById("useful-message");
    message.innerHTML = "Please enter a valid command. Try again.";
    return false;
  }
  return true;
}

/**
 * From Tableau dashboard, gets a worksheet so that filter can be applied
 * @return {Worksheet} An existing worksheet in the Tableau dashboard
 */
function getOneWorksheetFromAll() {
  let worksheets = tableau.extensions.dashboardContent.dashboard.worksheets;
  return worksheets[0];
}

/**
 * Algorithm which detects attribute of filter and value to filter to from voice command
 * @param  {String} command The voice command of user
 */
function filterCommand(command) {
  var filter = false;
  var to = false;
  var res = command.split(" ");
  var attribute = "";
  var value = "";
  for (i = 0; i < res.length; i++) {
    if (res[i] === "filter") {
      while (i < res.length && res[++i] !== "to") {
        attribute += correctAttributeWordToStandard(res[i]) + " ";
      }
      attribute = attribute.trim();
      filter = true;
    } else if (filter && res[i - 1] === "to") {
      while (i < res.length) {
        value += res[i++];
      }
      value = value.charAt(0).toUpperCase() + value.slice(1);
    }
  }
  if (attribute === "" || value === "") {
    message.innerHTML = "Unable to detect 'attribute-value' via voice command";
  } else {
    filterDashboard(attribute, value);
  }
}

/**
 * If stop word exists in attribute, then it will not be uppercased to follow best practice
 * @param  {String} attribute the attribute to be of the filter
 */
function correctAttributeWordToStandard(attribute) {
  //If attribute is not in set of stopwords, then uppercase attribute word. Otherwise, just return the stop word
  if (!stopWords.has(attribute)) {
    attribute = attribute.charAt(0).toUpperCase() + attribute.slice(1);
  }
  return attribute;
}

/**
 * Step 1 of applying filter to selected worksheet in the dashboard by getting the worksheet
 * @param  {String} attribute the attribute to be of the filter
 * @param  {String} value the desired value of the filter
 */
function filterDashboard(attribute, value) {
  tableau.extensions.initializeAsync().then(() => {
    let selectedWorksheet = getOneWorksheetFromAll();
    updateFilter(selectedWorksheet, attribute, value);
  });
}

/**
 * Final step of applying filter to selected worksheet by using the worksheet
 * @param  {String} worksheet the worksheet of the dashboard
 * @param  {String} attribute the attribute to be of the filter
 * @param  {String} value the desired value of the filter
 */
function updateFilter(worksheet, attribute, value) {
  var message = document.getElementById("useful-message");
  try {
    worksheet.applyFilterAsync(attribute, [value], "replace");
    message.innerHTML = "Filter applied successfully";
  } catch (error) {
    var message = document.getElementById("useful-message");
    message.innerHTML =
      "Unable to filter. Make sure voice command follows proper format.";
  }
}

/**
 * Disables browser's microphone
 */
function stopListening() {
  recognition.stop();
}

/**
 * Completely erases the text-area box, and any existing messages from previous commands
 */
function reset() {
  recognizing = false;
  recognition.stop();
  document.getElementById("enable").innerHTML = "Enable";
  document.getElementById("textarea").value = "";
  document.getElementById("useful-message").value = "";
}

/**
 * Toggles microphone based on if 'Enable' was clicked or if 'Disable and Clear' were clicked
 */
function toggleStartStop() {
  if (recognizing) {
    reset();
  } else {
    document.getElementById("enable").innerHTML = "Disable and Clear";
    recognition.start();
    recognizing = true;
  }
}
